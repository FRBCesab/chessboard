% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bishop_left.R
\name{bishop_left}
\alias{bishop_left}
\title{Find neighbors according to bishop left movement}
\usage{
bishop_left(
  nodes,
  focus,
  degree = 1,
  directed = FALSE,
  reverse = FALSE,
  self = FALSE
)
}
\arguments{
\item{nodes}{a \code{data.frame} with (at least) the following three columns:
\code{node}, \code{transect}, and \code{quadrats}. Must be the output if the function
\code{\link[=create_nodes_labels]{create_nodes_labels()}}.}

\item{focus}{an \code{character} of length 1. The node label for which the
neighbors must be found. Must exist in the \code{nodes} object.}

\item{degree}{an \code{integer} of length 1. The maximum number of neighbors to
search for in one direction.}

\item{directed}{a \code{logical} of length 1. If \code{FALSE} (default), search for
neighbors in all directions (undirected network). Otherwise, the network
will be considered as directed according to the main direction of the
network (i.e. through quadrats).}

\item{reverse}{a \code{logical} of length 1. If \code{TRUE}, change the orientation of
the network (i.e. through quadrats). This argument is ignored if
\code{directed = FALSE}.}

\item{self}{a \code{logical} of length 1. If \code{TRUE}, a node can be its own
neighbor. Default is \code{FALSE}.}
}
\value{
A subset of the \code{nodes} (\code{data.frame}) where each row is a neighbor
of \code{focus}.
}
\description{
For one node (argument \code{focus}), finds neighbors among a list of nodes
according to the bishop left movement.
This movement is derived from the \code{\link[=bishop]{bishop()}} method. The bishop left
can move along the bottom-right to top-left diagonal in both orientations
(default behavior).

\strong{Important:} Use the function \code{\link[=create_nodes_labels]{create_nodes_labels()}} to create nodes
labels.

The detection of neighbors using the bishop left method can only work with
two-dimensional sampling (both \strong{transects} and \strong{quadrats}).
For sampling of type \strong{transects-only} or \strong{quadrats-only}, please use the
functions \code{\link[=fool]{fool()}} or \code{\link[=pawn]{pawn()}}, respectively.

The argument \code{degree} controls for the degree of neighborhood.
If \code{degree = 2}, four neighbors will be identified (except if
\code{directed = TRUE}): four nodes along the bottom-right to top-left diagonal.

If \code{directed = TRUE} and \code{reverse = FALSE}, only two nodes will be
considered as neighbors (remove the nodes at the bottom of the focus node).

If \code{directed = TRUE} and \code{reverse = TRUE}, only two nodes will be
considered as neighbors (remove the nodes at the top of the focus node).
}
\details{
This function is internally called by \code{\link[=find_neighbors]{find_neighbors()}} but it can be
directly used to 1) understand the neighbors detection method, and 2) to
check detected neighbors for one particular node (\code{focus}).
}
\examples{
library("bridge")

# Two-dimensional sampling (only) ----
sites_infos <- expand.grid("transect" = 1:9, "quadrat" = 1:9)

nodes <- create_nodes_labels(data     = sites_infos, 
                             transect = "transect", 
                             quadrat  = "quadrat")

focus     <- "5-5"

# Default settings ----
neighbors <- bishop_left(nodes, focus)
gg_chessboard(nodes) +
  geom_piece(nodes, focus) +
  geom_neighbors(neighbors)

# Higher degree of neighborhood ----
neighbors <- bishop_left(nodes, focus, degree = 3)
gg_chessboard(nodes) +
  geom_piece(nodes, focus) +
  geom_neighbors(neighbors)
  
# Directed (default orientation) ----
neighbors <- bishop_left(nodes, focus, degree = 3, directed = TRUE)
gg_chessboard(nodes) +
  geom_piece(nodes, focus) +
  geom_neighbors(neighbors)
  
# Directed (reverse orientation) ----
neighbors <- bishop_left(nodes, focus, degree = 3, directed = TRUE, 
                         reverse = TRUE)
gg_chessboard(nodes) +
  geom_piece(nodes, focus) +
  geom_neighbors(neighbors)
}
